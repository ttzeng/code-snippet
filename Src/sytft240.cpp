#include <math.h>
#include <string.h>
#include "sytft240.hpp"

// Complete 8x8 font for ASCII characters 32-127 (96 characters total)
static const uint8_t font8x8[96][8] = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x20 (32) - Space
    {0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // 0x21 (33) - !
    {0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x22 (34) - "
    {0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // 0x23 (35) - #
    {0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // 0x24 (36) - $
    {0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // 0x25 (37) - %
    {0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // 0x26 (38) - &
    {0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x27 (39) - '
    {0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // 0x28 (40) - (
    {0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // 0x29 (41) - )
    {0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // 0x2A (42) - *
    {0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // 0x2B (43) - +
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x06, 0x00},   // 0x2C (44) - ,
    {0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // 0x2D (45) - -
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // 0x2E (46) - .
    {0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // 0x2F (47) - /
    {0x3E, 0x63, 0x73, 0x7B, 0x6F, 0x67, 0x3E, 0x00},   // 0x30 (48) - 0
    {0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // 0x31 (49) - 1
    {0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // 0x32 (50) - 2
    {0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // 0x33 (51) - 3
    {0x38, 0x3C, 0x36, 0x33, 0x7F, 0x30, 0x78, 0x00},   // 0x34 (52) - 4
    {0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // 0x35 (53) - 5
    {0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // 0x36 (54) - 6
    {0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // 0x37 (55) - 7
    {0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // 0x38 (56) - 8
    {0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // 0x39 (57) - 9
    {0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // 0x3A (58) - :
    {0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x06, 0x00},   // 0x3B (59) - ;
    {0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // 0x3C (60) - <
    {0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // 0x3D (61) - =
    {0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // 0x3E (62) - >
    {0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // 0x3F (63) - ?
    {0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // 0x40 (64) - @
    {0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // 0x41 (65) - A
    {0x3F, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3F, 0x00},   // 0x42 (66) - B
    {0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // 0x43 (67) - C
    {0x1F, 0x36, 0x66, 0x66, 0x66, 0x36, 0x1F, 0x00},   // 0x44 (68) - D
    {0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // 0x45 (69) - E
    {0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // 0x46 (70) - F
    {0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // 0x47 (71) - G
    {0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // 0x48 (72) - H
    {0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // 0x49 (73) - I
    {0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // 0x4A (74) - J
    {0x67, 0x66, 0x36, 0x1E, 0x36, 0x66, 0x67, 0x00},   // 0x4B (75) - K
    {0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // 0x4C (76) - L
    {0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // 0x4D (77) - M
    {0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // 0x4E (78) - N
    {0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // 0x4F (79) - O
    {0x3F, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // 0x50 (80) - P
    {0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // 0x51 (81) - Q
    {0x3F, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x67, 0x00},   // 0x52 (82) - R
    {0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // 0x53 (83) - S
    {0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // 0x54 (84) - T
    {0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // 0x55 (85) - U
    {0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // 0x56 (86) - V
    {0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // 0x57 (87) - W
    {0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // 0x58 (88) - X
    {0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // 0x59 (89) - Y
    {0x7F, 0x63, 0x31, 0x18, 0x4C, 0x66, 0x7F, 0x00},   // 0x5A (90) - Z
    {0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // 0x5B (91) - [
    {0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // 0x5C (92) - backslash
    {0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // 0x5D (93) - ]
    {0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // 0x5E (94) - ^
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00},   // 0x5F (95) - _
    {0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x60 (96) - `
    {0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // 0x61 (97) - a
    {0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // 0x62 (98) - b
    {0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // 0x63 (99) - c
    {0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // 0x64 (100) - d
    {0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // 0x65 (101) - e
    {0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // 0x66 (102) - f
    {0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // 0x67 (103) - g
    {0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // 0x68 (104) - h
    {0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // 0x69 (105) - i
    {0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // 0x6A (106) - j
    {0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // 0x6B (107) - k
    {0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // 0x6C (108) - l
    {0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // 0x6D (109) - m
    {0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // 0x6E (110) - n
    {0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // 0x6F (111) - o
    {0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // 0x70 (112) - p
    {0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // 0x71 (113) - q
    {0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // 0x72 (114) - r
    {0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // 0x73 (115) - s
    {0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // 0x74 (116) - t
    {0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // 0x75 (117) - u
    {0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // 0x76 (118) - v
    {0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // 0x77 (119) - w
    {0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // 0x78 (120) - x
    {0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // 0x79 (121) - y
    {0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // 0x7A (122) - z
    {0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // 0x7B (123) - {
    {0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},   // 0x7C (124) - |
    {0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // 0x7D (125) - }
    {0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x7E (126) - ~
    // 0x7F (127) - DEL (often displayed as a filled rectangle or special character)
    {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00}
};

sytft240& sytft240::pixel(uint16_t x, uint16_t y, uint16_t color)
{
    if (x < TFT_WIDTH && y && TFT_HEIGHT) {
        ILI9325C_WriteReg(ILI9325_GRAM_HOR_AD, x);
        ILI9325C_WriteReg(ILI9325_GRAM_VER_AD, y);
        ILI9325C_WriteReg(ILI9325_RW_GRAM, color);
    }
    return *this;
}

sytft240& sytft240::line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
    int dx = abs((int)(x2 - x1));
    int dy = abs((int)(y2 - y1));
    int sx = x1 < x2 ? 1 : -1;
    int sy = y1 < y2 ? 1 : -1;
    int err = dx - dy;

    while (1) {
        pixel(x1, y1, color);
        if (x1 == x2 && y1 == y2) break;
        int e2 = 2 * err;
        if (e2 > -dy) {
            err -= dy;
            x1 += sx;
        }
        if (e2 < dx) {
            err += dx;
            y1 += sy;
        }
    }
    return *this;
}

sytft240& sytft240::rect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
    line(x, y, x + width - 1, y, color);                           // Top
    line(x, y, x, y + height - 1, color);                          // Left
    line(x + width - 1, y, x + width - 1, y + height - 1, color);  // Right
    line(x, y + height - 1, x + width - 1, y + height - 1, color); // Bottom
    return *this;
}

sytft240& sytft240::fill(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
    for (uint16_t i = 0; i < height; i++)
        for (uint16_t j = 0; j < width; j++)
            pixel(x + j, y + i, color);
    return *this;
}

sytft240& sytft240::clear(uint16_t color)
{
    ILI9325C_WriteReg(ILI9325_GRAM_HOR_AD, 0);
    ILI9325C_WriteReg(ILI9325_GRAM_VER_AD, 0);

    // Select chip and set to command mode for register address
    _CS(0);
    _RS(0);
    _OUT(ILI9325_RW_GRAM);

    _RS(1);     // Switch to data mode for continuous data writes
    for (uint32_t i = 0; i < (uint32_t)TFT_WIDTH * TFT_HEIGHT; i++) {
        _OUT(color);
    }
    _CS(1);
    return *this;
}

sytft240& sytft240::draw_char(uint16_t x, uint16_t y, char ch, uint16_t color, uint16_t bgcolor)
{
    if (ch >= 32 && ch <= 127) {
        const uint8_t* font_char = font8x8[ch - 32]; // Automatic mapping
        for (int row = 0; row < 8; row++)
            for (int col = 0; col < 8; col++)
                pixel(x + col, y + row, (font_char[row] & (1 << col))? color : bgcolor);
    }
    return *this;
}

sytft240& sytft240::draw_string(uint16_t x, uint16_t y, char* str, uint16_t color, uint16_t bgcolor)
{
    uint16_t cur_x = x;

    while (*str) {
        if (*str == '\n') {
            cur_x = x;
            y += 10;
        } else {
            draw_char(cur_x, y, *str, color, bgcolor);
            cur_x += 8;
        }
        str++;
    }
    return *this;
}

void sytft240::ILI9325C_Init(mdelay_func mdelay)
{
    // Reset display
    _RST(0);
    mdelay(50);
    _RST(1);
    mdelay(120);

    // Initial register setup
    ILI9325C_WriteReg(0x00E3, 0x3008);
    ILI9325C_WriteReg(0x00E7, 0x0012);
    ILI9325C_WriteReg(0x00EF, 0x1231);
    ILI9325C_WriteReg(0x00E7, 0x0010);

    // Power control
    ILI9325C_WriteReg(ILI9325_POW_CTRL1, 0x0000);
    ILI9325C_WriteReg(ILI9325_POW_CTRL2, 0x0007);
    ILI9325C_WriteReg(ILI9325_POW_CTRL3, 0x0000);
    ILI9325C_WriteReg(ILI9325_POW_CTRL4, 0x0000);
    mdelay(200);

    ILI9325C_WriteReg(ILI9325_POW_CTRL1, 0x1690);
    ILI9325C_WriteReg(ILI9325_POW_CTRL2, 0x0227);
    mdelay(50);

    ILI9325C_WriteReg(ILI9325_POW_CTRL3, 0x001A);
    mdelay(50);

    ILI9325C_WriteReg(ILI9325_POW_CTRL4, 0x1800);
    ILI9325C_WriteReg(ILI9325_POW_CTRL7, 0x002A);
    mdelay(50);

    // Gamma correction
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL1, 0x0000);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL2, 0x0000);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL3, 0x0000);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL4, 0x0206);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL5, 0x0808);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL6, 0x0007);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL7, 0x0201);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL8, 0x0000);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL9, 0x0000);
    ILI9325C_WriteReg(ILI9325_GAMMA_CTRL10, 0x0000);

    // Display settings
    ILI9325C_WriteReg(ILI9325_DRIV_OUT_CTRL, 0x0100);
    ILI9325C_WriteReg(ILI9325_DRIV_WAV_CTRL, 0x0700);
    ILI9325C_WriteReg(ILI9325_ENTRY_MOD, 0x1030);
    ILI9325C_WriteReg(ILI9325_RESIZE_CTRL, 0x0000);
    ILI9325C_WriteReg(ILI9325_DISP_CTRL2, 0x0202);
    ILI9325C_WriteReg(ILI9325_DISP_CTRL3, 0x0000);
    ILI9325C_WriteReg(ILI9325_DISP_CTRL4, 0x0000);
    ILI9325C_WriteReg(ILI9325_RGB_DISP_IF_CTRL1, 0x0000);
    ILI9325C_WriteReg(ILI9325_FRM_MARKER_POS, 0x0000);
    ILI9325C_WriteReg(ILI9325_RGB_DISP_IF_CTRL2, 0x0000);

    // Panel control
    ILI9325C_WriteReg(ILI9325_PANEL_IF_CTRL1, 0x0010);
    ILI9325C_WriteReg(ILI9325_PANEL_IF_CTRL2, 0x0000);
    ILI9325C_WriteReg(ILI9325_PANEL_IF_CTRL3, 0x0003);
    ILI9325C_WriteReg(ILI9325_PANEL_IF_CTRL4, 0x1100);
    ILI9325C_WriteReg(ILI9325_PANEL_IF_CTRL5, 0x0000);
    ILI9325C_WriteReg(ILI9325_PANEL_IF_CTRL6, 0x0000);

    // Display on
    ILI9325C_WriteReg(ILI9325_DISP_CTRL1, 0x0133);

    // Set display area
    ILI9325C_WriteReg(ILI9325_HOR_START_AD, 0x0000);
    ILI9325C_WriteReg(ILI9325_HOR_END_AD, 0x00EF);
    ILI9325C_WriteReg(ILI9325_VER_START_AD, 0x0000);
    ILI9325C_WriteReg(ILI9325_VER_END_AD, 0x013F);

    ILI9325C_WriteReg(ILI9325_GATE_SCAN_CTRL1, 0xA700);
    ILI9325C_WriteReg(ILI9325_GATE_SCAN_CTRL2, 0x0003);
    ILI9325C_WriteReg(ILI9325_GATE_SCAN_CTRL3, 0x0000);

    ILI9325C_WriteReg(ILI9325_PART_IMG1_DISP_POS, 0x0000);
    ILI9325C_WriteReg(ILI9325_PART_IMG1_START_AD, 0x0000);
    ILI9325C_WriteReg(ILI9325_PART_IMG1_END_AD, 0x0000);
    ILI9325C_WriteReg(ILI9325_PART_IMG2_DISP_POS, 0x0000);
    ILI9325C_WriteReg(ILI9325_PART_IMG2_START_AD, 0x0000);
    ILI9325C_WriteReg(ILI9325_PART_IMG2_END_AD, 0x0000);
}

void sytft240::ILI9325C_WriteReg(uint16_t reg, uint16_t data)
{
    _CS(0);     // Select LCD
    _RS(0);     // Command mode
    _OUT(reg);

    _RS(1);     // Data mode
    _OUT(data);
    _CS(1);     // Deselect LCD
}
